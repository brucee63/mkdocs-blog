{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":"<p>My name is Bruce Charron, I've worn a few hats over my career. This blog primarily focuses on technology, but it also reflects my passions for photography and cooking, so you'll find a mix of those topics here too. Recently, I\u2019ve been enhancing my professional expertise through homelab projects, broadening my skill set and exploring new challenges.</p>"},{"location":"charro-beans/","title":"Charro Beans","text":"<p>My take on a classic Mexican side dish, when refried beans just won't do.</p> <p>Charro beans are a classic Mexican side dish, combining pinto beans with oven-baked thick-cut bacon and a medley of vegetables, including tomatoes, poblano, bell, and jalape\u00f1o peppers. The dish is seasoned with a blend of cumin, oregano, garlic, onion powder, and cilantro, simmered in a rich chicken stock base. The slow-cooked beans are enhanced with fresh lime juice and topped with cilantro just before serving for a zesty finish. Adjust spice levels to taste, this versatile recipe is a deliciously customizable crowd-pleaser.</p>"},{"location":"charro-beans/#ingredients","title":"Ingredients","text":"<ul> <li>1 lb thick cut bacon</li> <li>6 - 16oz cans of pinto beans</li> <li>2 tomatoes</li> <li>3-4 poblano peppers</li> <li>1 green bell pepper</li> <li>2 jalapeno peppers</li> <li>2 white onions</li> <li>4-6 cloves of garlic</li> <li>~64 oz of chicken stock</li> <li>1 lime</li> </ul> <p>Spices</p> <ul> <li>2 tablespoons cumin</li> <li>1 teaspoon onion powder</li> <li>1/2 teaspoon garlic powder</li> <li>1 teaspoon oregano</li> <li>1 teaspoon cilantro (add more if using fresh herb)</li> <li>1/2 teaspoon salt</li> <li>1/2 teaspoon black pepper</li> </ul>"},{"location":"charro-beans/#directions","title":"Directions","text":"<p>Bake the bacon in the oven, 350 degrees. Usually takes ~45 minutes, drain/dry the bacon and then chop it, set aside.</p> <p>Dice the onions, peppers, and tomatoes, keep separated. If you devein the jalapenos and discard the seeds, the soup won't be as spicy. Your choice. Mince the garlic cloves.</p> <p>In a large pot, add 1-2 tablespoons of olive oil (in a hot pan), saut\u00e9 the onions, then add the peppers and saut\u00e9, then add the garlic and saut\u00e9 for a few minutes more. Add bacon, mix. </p> <p>Add the tomatoes, then mix in the herbs and spices (all except cilantro). Then add about half the chicken stock and bring to a boil and then reduce to a simmer.</p> <p>Then add the beans, and the remaining chicken stock and set to a low simmer for 1-2 hours. Add additional salt or pepper to taste (if necessary). You can also add more chicken stock or water to get the consistency you like.</p> <p>Before serving add the juice from the lime to the soup and top off with the chopped cilantro.</p> <p>If the soup needs to be spicier at the end of the cook, you can add red pepper flake, cayenne pepper (sparingly), or hot sauce.</p>"},{"location":"chicken-soup/","title":"Chicken Soup","text":"<p>Mom's recipe with option for rice or pasta</p> <p>This is a simple chicken soup recipe from scratch. My mom's recipe calls for rice, but I like it with rotini pasta as well. It freezes well and does the trick in the wintertime. They key to the recipe is the end of the cook, to make sure the carrots, rice or pasta aren't overdone.</p>"},{"location":"chicken-soup/#ingredients","title":"Ingredients","text":"<ul> <li>Whole Chicken (roaster)</li> <li>2-3 cups of carrots</li> <li>2-3 cups of celery</li> <li>1 cup of rice (short grain if possible for white rice) or 1/2 box rotini pasta</li> <li>2 white onions</li> <li>64+ ounces of chicken stock or water and 2 tablespoons of chicken base</li> <li>salt (to taste)</li> <li>pepper (to taste)</li> </ul>"},{"location":"chicken-soup/#directions","title":"Directions","text":"<p>Chop the onions and celery. Prepare your stock (if not using premade).</p> <p>Remove the innerds of the bird. Rinse the bird, place in a large sauce pot (12-16 Quarts). Add the onions and celery, add enough stock to almost fully cover the bird.</p> <p>Bring temperature up and then reduce to low to low-medium and let simmer for 1 hour - 1h 15m. Make sure to turn the bird over every 15-20 minutes so it cooks evenly.</p> <p>Chop the carrots during this time, be sure that carrots aren't too thickly cut 1/8 - 1/4\". Set aside.</p> <p>Remove the bird, let sit for 10 minutes on a large cutting board. Put on some nitrile gloves and carve the bird. Taking the meat down to bite site pieces (mostly by hand, picking it apart). Add the chicken back to the pot. It you used a large bird, you can set a breast aside.</p> <p>***If using Pasta (for the starch) - Cook the pasta in a separate pan, add salt and olive oil. Do not overcook, it's best to sample the pasta near the end of the cook to get the proper firmness. Cook to al dente firmness. Wrinse with cold water, cover and and set aside so it doesn't stick together.</p> <p>Add the remainder of the stock to the soup. Raise the temperature to medium, add the carrots. Cook for ~20 minutes, the carrots should still be somewhat firm.</p> <p>***If using Rice (for the starch) -  Add the rice to the soup, don't overcook the rice. Test, when the rice is done, your carrots should be as well.</p> <p>Add salt and pepper to taste.</p> <p>***If using Pasta - If using pasta, I prefer to keep the pasta separate. Spoon it into the bowl and add the soup over the top. This is to keep the pasta from being overcooked. But you could also add the pasta into the soup when you remove it from heat (if you want to keep it together).</p> <p>For serving, make sure you get enough chicken, onions, celery and rice/pasta in the bowl, then top off with broth and add some cracked pepper.</p> <p>Best served with a slice of french bread and butter.</p>"},{"location":"are-llms-stuck-in-the-past/","title":"Are LLMs Stuck in the Past?","text":"<p>Large Language Models (LLMs) like ChatGPT and LLaMA represent groundbreaking advancements in technology. But as impressive as they are, are they living in the past?</p> <p> image by DALL-E</p>","tags":["llm","chatgpt","rag"]},{"location":"are-llms-stuck-in-the-past/#the-rise-of-llms","title":"The Rise of LLMs","text":"<p>ChatGPT has revolutionized how we perform research and search for information. For many tasks, it has replaced the traditional search engines. While I still use Google, the conversational, iterative model of LLMs offers an experience I prefer. </p>","tags":["llm","chatgpt","rag"]},{"location":"are-llms-stuck-in-the-past/#the-problem-outdated-information","title":"The Problem: Outdated Information","text":"<p>Despite their strengths, LLMs have a critical limitation: outdated knowledge. This was especially evident in earlier iterations, such as ChatGPT-3.5, which lacked web search capabilities. Even now, users relying on the free version of ChatGPT face this challenge.</p> <p>For example, previously when I asked what was the current long-term support (LTS) version of Node.js, the older ChatGTP-3.5 model confidently gave me outdated information (v14.x instead of the correct v18.x). While not a hallucination, this inability to access current data highlighted a significant gap.</p>","tags":["llm","chatgpt","rag"]},{"location":"are-llms-stuck-in-the-past/#solutions-web-search-rag","title":"Solutions: Web Search (RAG)","text":"<p>For Plus subscribers, web search capabilities can partially address this issue. By allowing the model to augment its answers with real-time search (retrieval-augmented generation or RAG), it can provide more accurate and current responses. However, this approach has its downsides:</p> <ul> <li>Cost: Web search requires the Plus subscription, which costs $20 per month.</li> <li>Longer Response Times: Searching the web takes extra time.</li> <li>Data Misinterpretation: The model may occasionally misrepresent search sourced information.</li> </ul>","tags":["llm","chatgpt","rag"]},{"location":"are-llms-stuck-in-the-past/#the-importance-of-knowledge-cutoff-dates","title":"The Importance of Knowledge Cutoff Dates","text":"<p>Understanding the knowledge cutoff dates for different models is essential. Here is a quick reference:</p> Model Knowledge Cutoff ChatGPT 3.5 2021 ChatGPT 3.5 +/Turbo January 2022 ChatGPT 4 October 2023 ChatGPT 4o October 2023 o1-mini October 2023 o1 December 2023 LLaMA 2 2023 <p>(Source: Wikipedia, OpenAI Community Forum)</p>","tags":["llm","chatgpt","rag"]},{"location":"are-llms-stuck-in-the-past/#asking-for-sources-and-citations","title":"Asking for Sources and Citations","text":"<p>When seeking time-sensitive or critical information, consider asking your LLM to include references or citations. This helps assess the reliability and how current the data is. You can also curate the results by specifying which sources to include or exclude, ensuring more authoritative and relevant results.</p>","tags":["llm","chatgpt","rag"]},{"location":"are-llms-stuck-in-the-past/#summary","title":"Summary","text":"<p>LLMs are transformative tools, but their limitations\u2014such as outdated training data must be understood. Leveraging features like web search and adopting better prompting strategies can help mitigate these issues, unlocking their full potential.</p>","tags":["llm","chatgpt","rag"]},{"location":"content-platform-lock-in-taking-control-of-your-data/","title":"Content Platform Lock-In: Taking Control of Your Data","text":"<p>The idea of owning your data sounds straightforward, but vendor or platform lock-in is a significant challenge. </p> <p></p> <p>When using Content or Knowledge Management Systems (CMS), exporting your data is often more complicated than expected. Many platforms store data in proprietary formats or limit access, restricting flexibility.</p> <p>This can become a hurdle when you want to use your data for purposes like enhancing generative AI models (e.g., Retrieval-Augmented Generation or RAG), or migrating to a different platform. The difficulty of these tasks often depends on the export capabilities your current platform provides.</p>","tags":["cms","markdown","rag"]},{"location":"content-platform-lock-in-taking-control-of-your-data/#options-for-exporting-your-data","title":"Options for Exporting Your Data","text":"<p>Here are some common methods to extract your data:</p> <ul> <li> <p>File-Based Export: Does the platform support file-based exports? Are they clear text or proprietary formats? </p> </li> <li> <p>Third-Party Tools: Chances are, someone has tackled your problem before. Check platforms like GitHub for migration utilities. Also, investigate if your target platform supports direct ingestion of data from your current system.</p> </li> <li> <p>API Access: An Application Programming Interface (API) can be your best friend. Platforms with robust APIs, especially those offering <code>OpenAPI</code>/<code>Swagger</code> documentation, are easier to work with.</p> </li> <li> <p>Database Access: If your data is stored in a database, direct queries can sometimes be the most efficient way to extract it\u2014provided this is permitted by your platform.</p> </li> <li> <p>Web Scraping: If the terms of service allow, web scraping libraries can be useful for extracting data directly from your platform.</p> </li> <li> <p>Copy and Paste: While this is the least efficient method, it can work if you\u2019re dealing with minimal data.</p> </li> </ul>","tags":["cms","markdown","rag"]},{"location":"content-platform-lock-in-taking-control-of-your-data/#mitigating-the-risks-of-lock-in","title":"Mitigating the Risks of Lock-In","text":"<p>Proactively planning can help you avoid future headaches. Here are some strategies:</p> <ul> <li> <p>Understand License Terms: Confirm that you retain ownership of your content and have unrestricted rights to export and use your data. Check for any restrictions, fees, or claims by the platform over your data, and ensure the agreement allows easy and accessible exports. Verifying this upfront can prevent future challenges.</p> </li> <li> <p>Evaluate Export Options: Consider export capabilities when choosing a platform. Is there an API? Is it user-friendly?</p> </li> <li> <p>Prioritize Open Standards: Look for platforms that export data in open formats like <code>JSON</code>, <code>Markdown</code>, <code>CSV</code>, <code>YAML</code>, or <code>XML</code>. This ensures your data remains accessible and portable.</p> </li> <li> <p>Avoid Overreliance on Custom Features: Custom features can create dependencies that make migration challenging. Opt for simplicity when possible.</p> </li> <li> <p>Leverage Import-Friendly Formats: Platforms that accept open formats like <code>Markdown</code> allow you to create and maintain content in these formats, retaining control from the start.</p> </li> </ul>","tags":["cms","markdown","rag"]},{"location":"content-platform-lock-in-taking-control-of-your-data/#conclusion","title":"Conclusion","text":"<p>Even if you don\u2019t need to export your data today, it\u2019s likely you will at some point\u2014whether for archival purposes, audits, or platform migration due to mergers or acquisitions. As the demand for data in AI and other technologies grows, its value will increasingly depend on how accessible and portable it is. Taking control of your data ensures you\u2019re ready for whatever the future brings.</p>","tags":["cms","markdown","rag"]},{"location":"tesseract-ocr/","title":"Tesseract OCR","text":"<p>Have basic OCR needs? Tesseract OCR is an open-source engine and it might just fit the bill.</p> <p> image by DALL-E</p> <p>If you have a need to extract text from screenshots (clipboard) or saved images, there are paid solutions available, but I usually reach for open source first. </p> <p>Tesseract OCR is an open source OCR Engine which supports a variety of input and output formats -  It's been around for a few decades and was open sourced by HP in 2005. It seems Google took over the project from 2006 to 2018.</p> <p>Inputs </p> <ul> <li>PNG, JPEG, TIFF, GIF</li> </ul> <p>Outputs</p> <ul> <li>Plain text, PDF</li> </ul>","tags":["ocr","docker","powershell"]},{"location":"tesseract-ocr/#windows-clipboard","title":"Windows Clipboard","text":"<p>On Windows, often I'll grab a screenshot and I'll need to extract text from it. This is a practical use case to give <code>Tesseract OCR</code> a whirl.</p> <p>First we'll need to host the service, I prefer to stand utility services up in Docker to evaluate. Below is a simple Python Flask app and <code>Dockerfile</code> which you can use to host so you can interact with it via a HTTP endpoint -</p> <p>app.py <pre><code>import os\nimport base64\nimport io\n\nfrom flask import Flask, request, jsonify\nimport pytesseract\nfrom PIL import Image\n\napp = Flask(__name__)\n\n@app.route(\"/ocr\", methods=[\"POST\"])\ndef ocr():\n    # Check if the request has the file part\n    if \"file\" in request.files:\n        # If we received a file directly (multipart/form-data)\n        file = request.files[\"file\"]\n        image = Image.open(file.stream).convert(\"RGB\")\n        text = pytesseract.image_to_string(image)\n        return jsonify({\"text\": text.strip()})\n    else:\n        # Otherwise, try parsing base64 from JSON\n        data = request.get_json()\n        if not data or \"image\" not in data:\n            return jsonify({\"error\": \"No image data found\"}), 400\n\n        # Decode base64 string\n        try:\n            image_data = base64.b64decode(data[\"image\"])\n            image = Image.open(io.BytesIO(image_data)).convert(\"RGB\")\n            text = pytesseract.image_to_string(image)\n            return jsonify({\"text\": text.strip()})\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 400\n\n\n@app.route(\"/\", methods=[\"GET\"])\ndef index():\n    return \"Tesseract OCR service is running.\"\n\n\nif __name__ == \"__main__\":\n    # You can make Flask listen on 0.0.0.0 so it is accessible from outside the container\n    app.run(host=\"0.0.0.0\", port=5000)\n</code></pre></p> <p>Dockerfile <pre><code># Use an official Python runtime as a parent image\nFROM python:3.11-slim\n\n# Install Tesseract and any additional packages you need\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y tesseract-ocr \\\n    libtesseract-dev \\\n    # Optional: add additional language packages, e.g. for German, French, etc.\n    tesseract-ocr-eng \\\n    # (Add any more languages you need)\n    # Clean up\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create a directory for the app\nWORKDIR /usr/src/app\n\n# Copy requirements first to leverage Docker cache\nCOPY requirements.txt ./\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the rest of the code\nCOPY . .\n\n# Expose the service port\nEXPOSE 5000\n\n# Run the Flask app\nCMD [ \"python\", \"app.py\" ]\n</code></pre></p>","tags":["ocr","docker","powershell"]},{"location":"tesseract-ocr/#docker-build","title":"Docker Build","text":"<p>Go ahead and build the image and serve on localhost port 5000 - <pre><code>docker build -t tesseract-ocr-service .\ndocker run -d -u 1001:1001 -p 5000:5000 --name tesseract_service --restart unless-stopped tesseract-ocr-service\n</code></pre></p> <p>To test, create a local <code>test.jpg</code> file, it can be any image/screenshot you save with text present. </p> <p>You can use <code>curl</code> on Linux or <code>powershell</code> to verify that <code>Tesseract OCR</code> is working - Note that the response is in JSON, so with <code>curl</code> I use the jq utility to extract just the raw text result from the JSON.</p>","tags":["ocr","docker","powershell"]},{"location":"tesseract-ocr/#testing-tesseract-ocr","title":"Testing Tesseract OCR","text":"<p>Curl <pre><code>#no jq\ncurl -X POST -F file=@test.jpg http://localhost:5000/ocr &gt;| test.txt\n#jq\ncurl -X POST -F file=@test.jpg http://localhost:5000/ocr | jq -r '.text' &gt;| test.txt\n</code></pre></p> <p>PowerShell Note: the following command with the <code>-Form</code> parameter requires Powershell 6 or later - <pre><code>(Invoke-RestMethod `\n    -Uri \"http://localhost:5000/ocr\" `\n    -Method POST `\n    -Form @{ file = Get-Item \"test.jpg\" }\n).text | Out-File -FilePath \"test.txt\"\n</code></pre></p>","tags":["ocr","docker","powershell"]},{"location":"tesseract-ocr/#helper-script","title":"Helper Script","text":"<p>Now we'll create a PowerShell script which we can use to scrape our clipboard or pass it an image file to OCR.</p> <p>ocr.ps1 <pre><code>param (\n    [string]$filePath\n)\n\n# Add necessary assembly reference\nAdd-Type -AssemblyName System.Drawing\n\n# Define the target URL\n$URL = \"http://localhost:5000/ocr\"\n\nif ($filePath) {\n    # Check if the file path is relative\n    if ($filePath -notmatch \"^[A-Z]:\\\\|^\\\\\\\\|^/\") {\n        $currentFolderPath = Join-Path (Get-Location) $filePath\n\n        if (-Not (Test-Path $currentFolderPath)) {\n            Write-Host \"File not found: $filePath\"\n            exit\n        }\n        $filePath = $currentFolderPath\n    }\n\n    # Load image from file path\n    $image = [System.Drawing.Image]::FromFile($filePath)\n} else {\n    # Load clipboard image\n    Add-Type -AssemblyName System.Windows.Forms\n    $image = [System.Windows.Forms.Clipboard]::GetImage()\n\n    if ($image -eq $null) {\n        Write-Host \"No image found in clipboard.\"\n        exit\n    }\n}\n\n# Convert image to a MemoryStream (PNG format)\n$memoryStream = New-Object System.IO.MemoryStream\n$image.Save($memoryStream, [System.Drawing.Imaging.ImageFormat]::Png)\n$byteArray = $memoryStream.ToArray()\n\n# Convert byte array to Base64 string\n$base64String = [Convert]::ToBase64String($byteArray)\n\n# Create JSON payload\n$payload = @{\n    image = $base64String\n    filename = \"image.png\"\n    mimetype = \"image/png\"\n} | ConvertTo-Json -Depth 2\n\n# Send as HTTP POST request\n$headers = @{\"Content-Type\" = \"application/json\"}\n$response = Invoke-RestMethod -Uri $URL -Method Post -Body $payload -Headers $headers\n\n# Print response\nWrite-Output \"$($response.text)\"\n</code></pre></p>","tags":["ocr","docker","powershell"]},{"location":"tesseract-ocr/#powershell-profile","title":"PowerShell Profile","text":"<p>If you haven't created a powershell profile previously, you can do so like this - <pre><code># determine if you have a profile\nTest-Path $PROFILE\n# create a profile\nNew-Item -Path $PROFILE -ItemType File -Force\n</code></pre></p> <p>Then update your PowerShell profile, you can do this by running <code>notepad $PROFILE</code> and add the following. Just adjust the location of the <code>ocr.ps1</code> script - <pre><code>function ocr {\n    param(\n        [Parameter(ValueFromRemainingArguments=$true)]\n        $args\n    )\n    &amp; \"C:\\scripts\\ocr.ps1\" $args\n}\n</code></pre></p> <p>Now if you take a screenshot (e.g. using the printscreen or alt-printscreen buttons), you can run the <code>ocr</code> command and it will output the text in your powershell prompt window. <pre><code>ocr\n</code></pre></p> <p>Also, you can pass an argument to the ocr command which is an image file and it will ocr the jpg, png, or tiff file.</p> <pre><code>ocr test.jpg\n</code></pre> <p>That's it. You can use Tesseract OCR locally as a productivity tool or utilize for preprocessing in an ETL process.</p>","tags":["ocr","docker","powershell"]},{"location":"archive/2025/","title":"2025","text":""},{"location":"category/technology/","title":"Technology","text":""},{"location":"category/cooking/","title":"Cooking","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#chatgpt","title":"chatgpt","text":"<ul> <li>Are LLMs Stuck in the Past?</li> </ul>"},{"location":"tags/#cms","title":"cms","text":"<ul> <li>Content Platform Lock-In: Taking Control of Your Data</li> </ul>"},{"location":"tags/#docker","title":"docker","text":"<ul> <li>Tesseract OCR</li> </ul>"},{"location":"tags/#llm","title":"llm","text":"<ul> <li>Are LLMs Stuck in the Past?</li> </ul>"},{"location":"tags/#markdown","title":"markdown","text":"<ul> <li>Content Platform Lock-In: Taking Control of Your Data</li> </ul>"},{"location":"tags/#ocr","title":"ocr","text":"<ul> <li>Tesseract OCR</li> </ul>"},{"location":"tags/#powershell","title":"powershell","text":"<ul> <li>Tesseract OCR</li> </ul>"},{"location":"tags/#rag","title":"rag","text":"<ul> <li>Are LLMs Stuck in the Past?</li> <li>Content Platform Lock-In: Taking Control of Your Data</li> </ul>"}]}